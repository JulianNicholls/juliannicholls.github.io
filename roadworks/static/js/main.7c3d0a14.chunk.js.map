{"version":3,"sources":["components/Header.js","components/Introduction.js","dateRanges.js","context/index.js","components/SelectionPanel.js","components/Road.js","components/RoadworksList.js","components/LoadingPanel.js","components/MapModal.js","App.js","index.js"],"names":["Header","className","href","target","rel","Introduction","title","now","Date","setHours","weekAgo","fortnightsTime","weekms","inTheLastWeek","dateStr","parse","WorksContext","React","createContext","useRoadworks","context","useContext","undefined","Error","SelectionPanel","roads","selected","setSelected","setSearchText","useState","location","setLocation","lastSelected","setLastSelected","useDebounce","length","htmlFor","id","onChange","e","value","map","index","key","type","dateUK","toLocaleDateString","day","month","year","Road","item","setMapCentre","description","startDate","endDate","expectedDelay","closureType","centreEasting","centreNorthing","roadClass","shouldBeDone","notStarted","notStartedYet","onClick","east","north","RoadworksList","roadworks","selectedRoadworks","panelStyle","alignItems","background","color","display","fontSize","height","justifyContent","left","position","top","width","LoadingPanel","style","nearbySite","process","ReactModal","setAppElement","defaultStyles","overlay","backgroundColor","content","bottom","right","Pointer","role","aria-label","MapModal","centre","open","setOpen","loading","setLoading","lat","lng","mapCentre","useEffect","translateCentre","a","fullURL","axios","get","response","status","data","split","reduce","coords","line","startsWith","parts","parseFloat","console","warn","error","isOpen","onRequestClose","contentLabel","bootstrapURLKeys","defaultCenter","defaultZoom","App","ReactDOM","render","children","setRoadworks","setRoads","searchText","initialLoad","fetch","json","roadworksData","filteredRoadworks","filter","lastRoads","roadList","acc","newValue","push","state","retval","roadIndex","findIndex","element","max","i","st","toLocaleLowerCase","includes","Provider","document","getElementById"],"mappings":"8NA8BeA,EA5BA,WACb,OACE,4BAAQC,UAAU,UAChB,yCACA,6BACE,uBAAGC,KAAK,+BAAR,QACA,uBAAGA,KAAK,0CAAR,sBACA,uBAAGA,KAAK,qCAAR,eACA,uBAAGA,KAAK,wCAAR,sBACA,uBACEA,KAAK,oCACLC,OAAO,SACPC,IAAI,uBAHN,UAOA,uBACEF,KAAK,sCACLC,OAAO,SACPC,IAAI,uBAHN,cC0BOC,EAlCM,WACnB,OACE,6BAASJ,UAAU,gBACjB,+CACoB,IAClB,uBAAGC,KAXT,uEAWwBI,MAAM,YAAxB,kCAEK,IAJP,mDAKmD,IACjD,uBAAGJ,KAbT,uEAawBI,MAAM,iBAAxB,iCANF,2GAaA,qIAE+B,IAC7B,uBAAGJ,KArBT,6GAqByBI,MAAM,WAAzB,gBAHF,KAQA,oR,+BCjCAC,GAAM,IAAIC,MAAOC,SAAS,EAAG,EAAG,GAChCC,EAAUH,EAFD,OAGTI,EAAiBJ,EAAMK,QAGhBC,EAAgB,SAAAC,GAC3B,OAAON,KAAKO,MAAMD,IAAYJ,GCH1BM,EAAeC,IAAMC,gBAoFdC,EAAe,WAC1B,IAAMC,EAAUC,qBAAWL,GAE3B,QAAgBM,IAAZF,EACF,MAAM,IAAIG,MACR,gEAGJ,OAAOH,GCnCMI,EAxDQ,WAAO,IAAD,EAC6BL,IAAhDM,EADmB,EACnBA,MAAOC,EADY,EACZA,SAAUC,EADE,EACFA,YAAaC,EADX,EACWA,cADX,EAEKC,mBAAS,IAFd,mBAEpBC,EAFoB,KAEVC,EAFU,OAGaF,mBAASH,GAHtB,mBAGpBM,EAHoB,KAGNC,EAHM,KAK3BC,aACE,WAKMJ,EAASK,OAAS,GACpBR,EAAY,IACZC,EAAcE,IACe,IAApBA,EAASK,QAAgBH,GAClCL,EAAYK,KAGhB,IACA,CAACF,IAWH,OACE,6BAAS7B,UAAU,mBACjB,6BACE,2BAAOmC,QAAQ,QAAf,QACA,4BAAQC,GAAG,OAAOC,SAXL,SAAAC,GACjBZ,EAAYY,EAAEpC,OAAOqC,OACrBP,EAAgBM,EAAEpC,OAAOqC,OACzBT,EAAY,IACZH,EAAc,KAO8BY,MAAOd,GAC7C,4BAAQc,MAAM,IAAd,QACCf,EAAMgB,KAAI,WAAYC,GAAZ,IAAGjB,EAAH,EAAGA,MAAH,OACT,4BAAQkB,IAAKD,EAAOF,MAAOf,GACxBA,QAKT,6BACE,2BAAOW,QAAQ,YAAf,UACA,2BACEQ,KAAK,SACLP,GAAG,WACHG,MAAOV,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAYQ,EAAEpC,OAAOqC,aCjDxCK,EAAS,SAAA/B,GACb,OAAO,IAAIN,KAAKM,GAASgC,mBAAmB,QAAS,CACnDC,IAAK,UACLC,MAAO,QACPC,KAAM,aAuDKC,EAnDF,SAAC,GAA4B,IHQlBpC,EGRRqC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAElB3B,EAQE0B,EARF1B,MACA4B,EAOEF,EAPFE,YACAC,EAMEH,EANFG,UACAC,EAKEJ,EALFI,QACAC,EAIEL,EAJFK,cACAC,EAGEN,EAHFM,YACAC,EAEEP,EAFFO,cACAC,EACER,EADFQ,eAGIC,EAAyB,MAAbnC,EAAM,GAAa,SAAW,WAC1CoC,GHLgB/C,EGKQyC,EHJvB/C,KAAKO,MAAMD,GAAWP,GGKvBuD,EHXqB,SAAAhD,GAC3B,OAAON,KAAKO,MAAMD,GAAWP,EGUVwD,CAAcT,GAEjC,OACE,6BAASrD,UAAW2D,GAClB,gCACE,4BAAKnC,GACL,8BAAO+B,GACP,8BAAOC,IAET,wCACaC,EADb,IAC6BC,EAC3B,4BACE1D,UAAU,aACV+D,QAAS,kBACPZ,EAAa,CAAEa,KAAMP,EAAeQ,MAAOP,MAH/C,QASF,2BAAIN,GACJ,0BAAMpD,UAAU,YAAhB,aACa4C,EAAOS,GADpB,MACmCT,EAAOU,GAAU,IACjDM,GACC,0BAAM5D,UAAU,kBAAhB,wBAED6D,GAAc,0BAAM7D,UAAU,kBAAhB,sBC5BRkE,EAnBO,SAAC,GAAsB,IAApBf,EAAmB,EAAnBA,aACjBgB,EAAYjD,IAAekD,oBAEjC,OACE,iCACwB,IAArBD,EAAUjC,QACT,wBAAIlC,UAAU,WAAd,yBAEDmE,EAAU3B,KAAI,SAACU,EAAMT,GAAP,OACb,kBAAC,EAAD,CAAMS,KAAMA,EAAMR,IAAKD,EAAOU,aAAcA,S,yBCb9CkB,EAAa,CACjBC,WAAY,SACZC,WAAY,qBACZC,MAAO,QACPC,QAAS,OACTC,SAAU,SACVC,OAAQ,OACRC,eAAgB,SAChBC,KAAM,OACNC,SAAU,QACVC,IAAK,OACLC,MAAO,QAWMC,EARM,WACnB,OACE,yBAAKjF,UAAU,gBAAgBkF,MAAOb,GACpC,4C,0lBCXN,IAAMc,EAAU,mDAA+CC,iBAA/C,mBAGhBC,IAAWC,cAAc,SAEzBD,IAAWE,cAAX,KACKF,IAAWE,cADhB,CAEEC,QAAQ,EAAD,GACFH,IAAWE,cAAcC,QADvB,CAELC,gBAAiB,uBAEnBC,QAAQ,EAAD,GACFL,IAAWE,cAAcG,QADvB,CAELX,IAAK,OACLY,OAAQ,OACRd,KAAM,OACNe,MAAO,WAIX,IAAMC,EAAU,WACd,OACE,0BAAM7F,UAAU,UAAU8F,KAAK,MAAMC,aAAW,sBAAhD,iBAgGWC,EA1FE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACPrE,oBAAS,GADF,mBACxBsE,EADwB,KAClBC,EADkB,OAEDvE,oBAAS,GAFR,mBAExBwE,EAFwB,KAEfC,EAFe,OAGGzE,mBAAS,CAAE0E,IAAK,EAAGC,IAAK,IAH3B,mBAGxBC,EAHwB,KAGbrD,EAHa,KA+C/B,OA1CAsD,qBAAU,WACR,IAAMC,EAAe,uCAAG,oCAAAC,EAAA,6DAGtBN,GAAW,GAHW,SAMpBO,EAAO,UAvCG,sCAuCH,YAAmBzB,GAAnB,OAAgCc,EAAOjC,KAAvC,YAA+CiC,EAAOhC,OANzC,SAOH4C,IAAMC,IAAIF,GAPP,OASI,OAFxBG,EAPoB,QASPC,QAAiB,EACPD,EAASE,KAAKC,MAAM,MAAMC,QAC7C,SAACC,EAAQC,GACP,GAAIA,EAAKC,WAAW,MAAO,CACzB,IAAMC,EAAQF,EAAKH,MAAM,KACzB,MAAO,CAAEZ,IAAKkB,WAAWD,EAAM,IAAKhB,IAAKiB,WAAWD,EAAM,KAG5D,OAAOH,IAET,CAAEd,IAAK,EAAGC,IAAK,IATTD,EADmB,EACnBA,IAAKC,EADc,EACdA,IAYbpD,EAAa,CAAEmD,MAAKC,QACpBF,GAAW,GACXF,GAAQ,IAERsB,QAAQC,KAAK,CAAEd,UAASG,aA1BN,gDA6BpBU,QAAQE,MAAM,CAAEA,MAAK,OACrBF,QAAQC,KAAK,CAAEd,UAASG,aAExBZ,GAAQ,GAhCY,yDAAH,qDAoCA,IAAjBF,EAAOhC,OAA+B,IAAhBgC,EAAOjC,KAC/BmC,GAAQ,GACHO,MACN,CAACT,IAGF,oCACGG,EACC,kBAAC,EAAD,MAEA,kBAAC,IAAD,CACEwB,OAAQ1B,EACR2B,eAAgB,kBAAM1B,GAAQ,IAC9B2B,aAAa,gBACb5C,MAAO,CACLM,QAAS,CACPC,gBAAiB,sBAEnBC,QAAS,CACPX,IAAK,OACLY,OAAQ,OACRd,KAAM,OACNe,MAAO,UAIX,yBAAKxD,GAAG,OACN,kBAAC,IAAD,CACE2F,iBAAkB,CAAErF,IAAK0C,2CACzB4C,cAAexB,EACfyB,YAAa,IAEb,kBAAC,EAAYzB,QClFZ0B,MApBf,WAAgB,IAAD,EACqBtG,mBAAS,CAAEoC,KAAM,EAAGC,MAAO,IADhD,mBACNuC,EADM,KACKrD,EADL,KAGb,OACE,yBAAKnD,UAAU,OACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,aACd,yBAAKA,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGF,kBAAC,EAAD,CAAemD,aAAcA,KAG/B,kBAAC,EAAD,CAAU8C,OAAQO,M,YCdxB2B,IAASC,OACP,mBPJ+B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACfzG,mBAAS,IADM,mBAC1CuC,EAD0C,KAC/BmE,EAD+B,OAEvB1G,mBAAS,IAFc,mBAE1CJ,EAF0C,KAEnC+G,EAFmC,OAGjB3G,mBAAS,IAHQ,mBAG1CH,EAH0C,KAGhCC,EAHgC,OAIbE,mBAAS,IAJI,mBAI1C4G,EAJ0C,KAI9B7G,EAJ8B,KAM3C8G,EAAW,uCAAG,oCAAA9B,EAAA,+EAEO+B,MAAM,wBAFb,cAEV3B,EAFU,gBAGYA,EAAS4B,OAHrB,OAGVC,EAHU,OAQVC,EAAoBD,EAAcE,QAAO,YAA6B,IDThDjI,ECSsBwC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAC3D,ODV0BzC,ECUAwC,EDTzB9C,KAAKO,MAAMD,IAAYH,GCSgBE,EAAc0C,MAGxDgF,EAAaO,GAGTE,EAAY,CAAEvH,MAAO,GAAIiB,MAAO,GAE9BuG,EAAWH,EAAkB1B,QAAO,SAAC8B,EAAD,EAAiBxG,GAAW,IAApBjB,EAAmB,EAAnBA,MAChD,GAAIA,IAAUuH,EAAUvH,MAAO,CAC7B,IAAM0H,EAAW,CAAE1H,QAAOiB,SAE1BwG,EAAIE,KAAKD,GACTH,EAAYG,EAGd,OAAOD,IACN,IAEHV,EAASS,GACTtH,EAAYsH,EAAS,GAAGxH,OA7BR,kDA+BhBiG,QAAQE,MAAR,MA/BgB,0DAAH,qDA2DjBlB,qBAAU,WACRgC,MACC,IAEH,IAAMW,EAAQ,CACZjF,YACA3C,QACAC,WACA+G,aACApE,kBAjCwB,WACxB,IAAIiF,EAAS,GAEb,GAAiB,KAAb5H,EAOF,IANA,IAAM6H,EAAY9H,EAAM+H,WAAU,SAAAC,GAAO,OAAIA,EAAQhI,QAAUC,KACzDgI,EACJH,EAAY9H,EAAMU,OAAS,EACvBV,EAAM8H,EAAY,GAAG7G,MACrB0B,EAAUjC,OAEPwH,EAAIlI,EAAM8H,GAAW7G,MAAOiH,EAAID,IAAOC,EAC9CL,EAAOF,KAAKhF,EAAUuF,SAEnB,GAAmB,KAAflB,EAAmB,CAC5B,IAAMmB,EAAKnB,EAAWoB,oBAEtBP,EAASlF,EAAU2E,QAAO,qBAAG1F,YACfwG,oBAAoBC,SAASF,MAI7C,OAAON,GAaP3H,cACAC,iBAGF,OAAO,kBAACZ,EAAa+I,SAAd,CAAuBvH,MAAO6G,GAAQf,KO3E7C,KACE,kBAAC,EAAD,OAEF0B,SAASC,eAAe,W","file":"static/js/main.7c3d0a14.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <h1>Roadworks</h1>\n      <nav>\n        <a href=\"https://reallybigshoe.co.uk\">Home</a>\n        <a href=\"https://reallybigshoe.co.uk/visualiser\">Palette Visualiser</a>\n        <a href=\"http://spacex.reallybigshoe.co.uk\">SpaceX Info</a>\n        <a href=\"http://countdown.reallybigshoe.co.uk\">Countdown Magician</a>\n        <a\n          href=\"https://github.com/JulianNicholls\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </a>\n        <a\n          href=\"https://twitter.com/ReallyBigShoeUK\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Twitter\n        </a>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\n// Page links\nconst dftPage =\n  'https://www.gov.uk/government/organisations/department-for-transport';\nconst oglPage =\n  'https://www.nationalarchives.gov.uk/doc/open%2Dgovernment%2Dlicence/';\nconst dataPage =\n  'https://data.gov.uk/dataset/5b3267d8-4307-4eef-a9af-3a4c28224694/planned-road-works-on-the-he-road-network';\n\nconst Introduction = () => {\n  return (\n    <section className=\"introduction\">\n      <p>\n        In 2011, the UK's{' '}\n        <a href={dftPage} title=\"DfT Site\">\n          Department for Transport (DfT)\n        </a>{' '}\n        began to issue datasets for public use under the{' '}\n        <a href={oglPage} title=\"Usage Licence\">\n          Open&nbsp;Government&nbsp;License\n        </a>\n        . One of the first of these was planned roadworks issued by the Highways\n        Agency (now Highways England).\n      </p>\n\n      <p>\n        These are the latest planned roadworks on Highways England's roads, loaded\n        from the latest data file on{' '}\n        <a href={dataPage} title=\"dataset\">\n          this&nbsp;page\n        </a>\n        .\n      </p>\n      <p>\n        You can find information by road number, or search descriptions. The\n        listed roadworks have already started or will start within the next two\n        weeks. Roadworks which should have been completed at least a week ago are\n        not shown (hopeful, I know).\n      </p>\n    </section>\n  );\n};\n\nexport default Introduction;\n","const weekms = 7 * 86400 * 1000; // A week of milliseconds\nconst now = new Date().setHours(0, 0, 0); // Midnight today\nconst weekAgo = now - weekms; // A week ago\nconst fortnightsTime = now + weekms * 2; // Two week's time\n\n// Is a given date later than a week ago\nexport const inTheLastWeek = dateStr => {\n  return Date.parse(dateStr) >= weekAgo;\n};\n\n// Is a given date before a fortnight's time\nexport const inTheNextFortnight = dateStr => {\n  return Date.parse(dateStr) <= fortnightsTime;\n};\n\n// Is a date in the future\nexport const notStartedYet = dateStr => {\n  return Date.parse(dateStr) > now;\n};\n\n// Is a date in the past\nexport const finished = dateStr => {\n  return Date.parse(dateStr) < now;\n};\n","import React, { useEffect, useState, useContext } from 'react';\n\nimport { inTheLastWeek, inTheNextFortnight } from '../dateRanges';\n\nconst WorksContext = React.createContext();\n\nexport const RoadworksProvider = ({ children }) => {\n  const [roadworks, setRoadworks] = useState([]);\n  const [roads, setRoads] = useState([]);\n  const [selected, setSelected] = useState('');\n  const [searchText, setSearchText] = useState('');\n\n  const initialLoad = async () => {\n    try {\n      const response = await fetch('/data/roadworks.json');\n      const roadworksData = await response.json();\n\n      // Filter the roadworks so that\n      //   (a) They start before 14 days time.\n      //   (b) They haven't been over for more than a week.\n      const filteredRoadworks = roadworksData.filter(({ startDate, endDate }) => {\n        return inTheNextFortnight(startDate) && inTheLastWeek(endDate);\n      });\n\n      setRoadworks(filteredRoadworks);\n\n      // Collect the unique roads and their index in the list\n      let lastRoads = { roads: '', index: 0 };\n\n      const roadList = filteredRoadworks.reduce((acc, { roads }, index) => {\n        if (roads !== lastRoads.roads) {\n          const newValue = { roads, index };\n\n          acc.push(newValue);\n          lastRoads = newValue;\n        }\n\n        return acc;\n      }, []);\n\n      setRoads(roadList);\n      setSelected(roadList[0].roads); // Default to first of list\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const selectedRoadworks = () => {\n    let retval = [];\n\n    if (selected !== '') {\n      const roadIndex = roads.findIndex(element => element.roads === selected);\n      const max =\n        roadIndex < roads.length - 1\n          ? roads[roadIndex + 1].index\n          : roadworks.length;\n\n      for (let i = roads[roadIndex].index; i < max; ++i) {\n        retval.push(roadworks[i]);\n      }\n    } else if (searchText !== '') {\n      const st = searchText.toLocaleLowerCase();\n\n      retval = roadworks.filter(({ description }) =>\n        description.toLocaleLowerCase().includes(st)\n      );\n    }\n\n    return retval;\n  };\n\n  useEffect(() => {\n    initialLoad();\n  }, []);\n\n  const state = {\n    roadworks,\n    roads,\n    selected,\n    searchText,\n    selectedRoadworks,\n    setSelected,\n    setSearchText,\n  };\n\n  return <WorksContext.Provider value={state}>{children}</WorksContext.Provider>;\n};\n\nexport const useRoadworks = () => {\n  const context = useContext(WorksContext);\n\n  if (context === undefined)\n    throw new Error(\n      'useRoadworks() must be used within a RoadworksProvider block'\n    );\n\n  return context;\n};\n","import React, { useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { useRoadworks } from '../context';\n\nconst SelectionPanel = () => {\n  const { roads, selected, setSelected, setSearchText } = useRoadworks();\n  const [location, setLocation] = useState('');\n  const [lastSelected, setLastSelected] = useState(selected);\n\n  useDebounce(\n    () => {\n      // When entering search text, remove the selected road from the context\n\n      // Only start searching after two characters. I was going to make it three,\n      // but searching for e.g. BT is a valid thing to do.\n      if (location.length > 1) {\n        setSelected('');\n        setSearchText(location);\n      } else if (location.length === 0 && lastSelected) {\n        setSelected(lastSelected);\n      }\n    },\n    600,\n    [location]\n  );\n\n  // When selecting a road, remove the search text from here and the context\n  const changeRoad = e => {\n    setSelected(e.target.value);\n    setLastSelected(e.target.value);\n    setLocation('');\n    setSearchText('');\n  };\n\n  return (\n    <section className=\"selection-panel\">\n      <div>\n        <label htmlFor=\"road\">Road</label>\n        <select id=\"road\" onChange={changeRoad} value={selected}>\n          <option value=\"\">&nbsp;</option>\n          {roads.map(({ roads }, index) => (\n            <option key={index} value={roads}>\n              {roads}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <label htmlFor=\"location\">Search</label>\n        <input\n          type=\"search\"\n          id=\"location\"\n          value={location}\n          onChange={e => setLocation(e.target.value)}\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default SelectionPanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { notStartedYet, finished } from '../dateRanges';\n\nconst dateUK = dateStr => {\n  return new Date(dateStr).toLocaleDateString('en-gb', {\n    day: '2-digit',\n    month: 'short',\n    year: 'numeric',\n  });\n};\n\nconst Road = ({ item, setMapCentre }) => {\n  const {\n    roads,\n    description,\n    startDate,\n    endDate,\n    expectedDelay,\n    closureType,\n    centreEasting,\n    centreNorthing,\n  } = item;\n\n  const roadClass = roads[0] === 'A' ? 'a-road' : 'motorway';\n  const shouldBeDone = finished(endDate);\n  const notStarted = notStartedYet(startDate);\n\n  return (\n    <article className={roadClass}>\n      <header>\n        <h2>{roads}</h2>\n        <span>{expectedDelay}</span>\n        <span>{closureType}</span>\n      </header>\n      <p>\n        Location: {centreEasting} {centreNorthing}\n        <button\n          className=\"map-button\"\n          onClick={() =>\n            setMapCentre({ east: centreEasting, north: centreNorthing })\n          }\n        >\n          Map\n        </button>\n      </p>\n      <p>{description}</p>\n      <span className=\"duration\">\n        Duration: {dateUK(startDate)} - {dateUK(endDate)}{' '}\n        {shouldBeDone && (\n          <span className=\"duration-extra\">(should be complete)</span>\n        )}\n        {notStarted && <span className=\"duration-extra\">(Starting soon)</span>}\n      </span>\n    </article>\n  );\n};\n\nRoad.propTypes = {\n  item: PropTypes.object.isRequired,\n  setMapCentre: PropTypes.func.isRequired,\n};\n\nexport default Road;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Road from './Road';\nimport { useRoadworks } from '../context';\n\nconst RoadworksList = ({ setMapCentre }) => {\n  const roadworks = useRoadworks().selectedRoadworks();\n\n  return (\n    <section>\n      {roadworks.length === 0 && (\n        <h2 className=\"centred\">No matching roadworks</h2>\n      )}\n      {roadworks.map((item, index) => (\n        <Road item={item} key={index} setMapCentre={setMapCentre} />\n      ))}\n    </section>\n  );\n};\n\nRoadworksList.propTypes = {\n  setMapCentre: PropTypes.func.isRequired,\n};\n\nexport default RoadworksList;\n","import React from 'react';\n\nconst panelStyle = {\n  alignItems: 'center',\n  background: 'rgba(0, 0, 0, 0.7)',\n  color: 'white',\n  display: 'flex',\n  fontSize: '1.3rem',\n  height: '25vh',\n  justifyContent: 'center',\n  left: '35vw',\n  position: 'fixed',\n  top: '35vh',\n  width: '25vw',\n};\n\nconst LoadingPanel = () => {\n  return (\n    <div className=\"loading-panel\" style={panelStyle}>\n      <h2>Loading...</h2>\n    </div>\n  );\n};\n\nexport default LoadingPanel;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport LoadingPanel from './LoadingPanel';\nimport ReactModal from 'react-modal';\nimport RoadworksMap from 'google-map-react';\n\nconst nearbySite = `http://nearby.org.uk/api/convert.php?key=${process.env.REACT_APP_NEARBY_KEY}&output=text&p=`;\nconst openProxy = 'https://cors-anywhere.herokuapp.com';\n\nReactModal.setAppElement('#root');\n\nReactModal.defaultStyles = {\n  ...ReactModal.defaultStyles,\n  overlay: {\n    ...ReactModal.defaultStyles.overlay,\n    backgroundColor: 'rgba(0, 0, 0, 0.4)',\n  },\n  content: {\n    ...ReactModal.defaultStyles.content,\n    top: '10vh',\n    bottom: '10vh',\n    left: '10vw',\n    right: '10vw',\n  },\n};\n\nconst Pointer = () => {\n  return (\n    <span className=\"pointer\" role=\"img\" aria-label=\"roadworks-location\">\n      👆\n    </span>\n  );\n};\n\nconst MapModal = ({ centre }) => {\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [mapCentre, setMapCentre] = useState({ lat: 0, lng: 0 });\n\n  useEffect(() => {\n    const translateCentre = async () => {\n      let response, fullURL;\n\n      setLoading(true);\n\n      try {\n        fullURL = `${openProxy}/${nearbySite}${centre.east},${centre.north}`;\n        response = await axios.get(fullURL);\n\n        if (response.status === 200) {\n          const { lat, lng } = response.data.split('\\n').reduce(\n            (coords, line) => {\n              if (line.startsWith('ll')) {\n                const parts = line.split(',');\n                return { lat: parseFloat(parts[2]), lng: parseFloat(parts[3]) };\n              }\n\n              return coords;\n            },\n            { lat: 0, lng: 0 }\n          );\n\n          setMapCentre({ lat, lng });\n          setLoading(false);\n          setOpen(true);\n        } else {\n          console.warn({ fullURL, response });\n        }\n      } catch (error) {\n        console.error({ error });\n        console.warn({ fullURL, response });\n\n        setOpen(false);\n      }\n    };\n\n    if (centre.north === 0 && centre.east === 0) {\n      setOpen(false);\n    } else translateCentre();\n  }, [centre]);\n\n  return (\n    <>\n      {loading ? (\n        <LoadingPanel />\n      ) : (\n        <ReactModal\n          isOpen={open}\n          onRequestClose={() => setOpen(false)}\n          contentLabel=\"Roadworks Map\"\n          style={{\n            overlay: {\n              backgroundColor: 'rgba(0, 0, 0, 0.4)',\n            },\n            content: {\n              top: '15vh',\n              bottom: '15vh',\n              left: '15vw',\n              right: '15vw',\n            },\n          }}\n        >\n          <div id=\"map\">\n            <RoadworksMap\n              bootstrapURLKeys={{ key: process.env.REACT_APP_MAPS_KEY }}\n              defaultCenter={mapCentre}\n              defaultZoom={15}\n            >\n              <Pointer {...mapCentre} />\n            </RoadworksMap>\n          </div>\n        </ReactModal>\n      )}\n    </>\n  );\n};\n\nMapModal.propTypes = {\n  centre: PropTypes.shape({\n    east: PropTypes.number.isRequired,\n    north: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default MapModal;\n","import React, { useState } from 'react';\n\nimport Header from './components/Header';\nimport Introduction from './components/Introduction';\nimport SelectionPanel from './components/SelectionPanel';\nimport RoadworksList from './components/RoadworksList';\nimport MapModal from './components/MapModal';\n\nfunction App() {\n  const [mapCentre, setMapCentre] = useState({ east: 0, north: 0 });\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"container\">\n        <div className=\"top-section\">\n          <Introduction />\n          <SelectionPanel />\n        </div>\n\n        <RoadworksList setMapCentre={setMapCentre} />\n      </main>\n\n      <MapModal centre={mapCentre} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { RoadworksProvider } from './context';\n\nimport 'normalize.css/normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <RoadworksProvider>\n    <App />\n  </RoadworksProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}