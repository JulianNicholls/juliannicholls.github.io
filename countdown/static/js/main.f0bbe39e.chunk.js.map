{"version":3,"sources":["context/cd-numbers.js","components/Header.js","components/Tabs.js","Word.js","ClientWordList.js","context/index.js","components/LetterForm.js","components/NumbersPanel.js","components/WordBox.js","components/WordView.js","App.js","index.js"],"names":["bestresult","bestvalsums","OPS","n1","n2","_","OPCOST","_recurse_solve_numbers","numbers","searchedi","was_generated","target","levels","valsums","trickshot","i","length","ni","j","nj","o","r","op_cost","Math","abs","newvalsums","old_was_gen","fullsize","array","constructor","Array","len","_solve_numbers","map","x","fill","tidyup_result","result","mapping","swappable","child","splice","concat","slice","temp","childs","sort","a","b","serialise_result","childparts","push","parts","sliced","l","thispart","stringify_result","serialised","output","join","substr","exports","serialisedResult","solve_numbers","Header","className","href","src","alt","rel","Tabs","panel","setPanel","data-section","onClick","Word","word","this","text","toLowerCase","_deconstruct","other","letterMap","Map","ok","forEach","value","key","has","get","size","othervalue","split","char","count","set","ClientWordList","_loadWords","words","filter","canBeMadeFrom","lDiff","fetch","response","json","line","WordContext","React","createContext","WordsProvider","children","useState","setWords","foundWords","setFoundWords","useEffect","state","getWords","letters","solveNumbers","Provider","useWords","context","useContext","undefined","Error","LetterForm","setLetters","id","onSubmit","event","preventDefault","type","inputMode","onChange","e","entry","test","autoComplete","autoCorrect","autoFocus","disabled","NumbersResult","lines","section","total","op","NumbersResultBox","NumbersPanel","setNumbers","setTarget","setResult","htmlFor","trimStart","placeholder","trim","numArray","num","parseInt","targetNum","WordBox","index","toUpperCase","WordView","currentLength","currentWords","boxes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0bbe39e.chunk.js","sourcesContent":["/* Javascript version of cntdn\n *\n * Countdown game solver\n *\n * After James Stanley 2014 - https://github.com/jes/cntdn\n */\n\nlet bestresult;\nlet bestvalsums;\n\nconst OPS = {\n  '+': (n1, n2) => (n1 < 0 || n2 < 0 ? false : n1 + n2),\n  '-': (n1, n2) => (n2 >= n1 ? false : n1 - n2),\n  _: (n2, n1) => (n2 >= n1 ? false : n1 - n2),\n  '*': (n1, n2) => n1 * n2,\n  '/': (n1, n2) => (n2 === 0 || n1 % n2 !== 0 ? false : n1 / n2),\n  '?': (n2, n1) => (n2 === 0 || n1 % n2 !== 0 ? false : n1 / n2),\n};\n\nconst OPCOST = {\n  '+': 1,\n  '-': 1.05,\n  _: 1.05,\n  '*': 1.2,\n  '/': 1.3,\n  '?': 1.3,\n};\n\nfunction _recurse_solve_numbers(\n  numbers,\n  searchedi,\n  was_generated,\n  target,\n  levels,\n  valsums,\n  trickshot\n) {\n  levels--;\n\n  for (let i = 0; i < numbers.length - 1; ++i) {\n    const ni = numbers[i];\n\n    if (ni === false) continue;\n\n    numbers[i] = false;\n\n    for (let j = i + 1; j < numbers.length; ++j) {\n      const nj = numbers[j];\n\n      if (nj === false) continue;\n\n      if (i < searchedi && !was_generated[i] && !was_generated[j]) continue;\n\n      for (const o in OPS) {\n        const r = OPS[o](ni[0], nj[0]);\n        if (r === false) continue;\n\n        let op_cost = Math.abs(r);\n        while (op_cost % 10 === 0 && op_cost !== 0) {\n          op_cost /= 10;\n        }\n\n        if ((ni[0] === 10 || nj[0] === 10) && o === '*')\n          // HACK: multiplication by 10 is cheap\n          op_cost = 1;\n        op_cost *= OPCOST[o];\n\n        const newvalsums = valsums + op_cost;\n\n        if (\n          Math.abs(r - target) < Math.abs(bestresult[0] - target) ||\n          (Math.abs(r - target) === Math.abs(bestresult[0] - target) &&\n            (trickshot || newvalsums < bestvalsums))\n        ) {\n          bestresult = [r, o, ni, nj];\n          bestvalsums = newvalsums;\n        }\n\n        numbers[j] = [r, o, ni, nj];\n        const old_was_gen = was_generated[j];\n        was_generated[j] = true;\n\n        if (\n          levels > 0 &&\n          (trickshot || bestresult[0] !== target || newvalsums < bestvalsums)\n        )\n          _recurse_solve_numbers(\n            numbers,\n            i + 1,\n            was_generated,\n            target,\n            levels,\n            newvalsums,\n            trickshot\n          );\n\n        was_generated[j] = old_was_gen;\n        numbers[j] = nj;\n      }\n    }\n\n    numbers[i] = ni;\n  }\n}\n\nfunction fullsize(array) {\n  if (array.constructor !== Array) return 0;\n\n  let len = 0;\n\n  for (let i = 0; i < array.length; ++i) {\n    len += fullsize(array[i]);\n  }\n\n  return len + array.length;\n}\n\nfunction _solve_numbers(numbers, target, trickshot) {\n  numbers = numbers.map((x) => [x, false]);\n\n  const was_generated = new Array(numbers.length).fill(false);\n\n  bestresult = [0, 0];\n\n  /* attempt to solve with dfs */\n  _recurse_solve_numbers(\n    numbers,\n    0,\n    was_generated,\n    target,\n    numbers.length,\n    0,\n    trickshot\n  );\n\n  return bestresult;\n}\n\nfunction tidyup_result(result) {\n  const mapping = {\n    '?': '/',\n    _: '-',\n  };\n\n  const swappable = {\n    '*': true,\n    '+': true,\n  };\n\n  if (result.length < 4) return result;\n\n  for (let i = 2; i < result.length; ++i) {\n    let child = result[i];\n\n    child = tidyup_result(child);\n\n    if (child[1] === result[1] && swappable[result[1]]) {\n      result.splice(i--, 1);\n      result = result.concat(child.slice(2));\n    } else {\n      result[i] = child;\n    }\n  }\n\n  if (result[1] in mapping) {\n    result[1] = mapping[result[1]];\n\n    const temp = result[2];\n    result[2] = result[3];\n    result[3] = temp;\n  } else if (swappable[result[1]]) {\n    const childs = result.slice(2).sort((a, b) => b[0] - a[0]);\n\n    for (let i = 2; i < result.length; ++i) {\n      result[i] = childs[i - 2];\n    }\n  }\n\n  return result;\n}\n\nfunction serialise_result(result) {\n  const childparts = [];\n\n  for (let i = 2; i < result.length; ++i) {\n    const child = result[i];\n\n    if (child.length >= 4) {\n      childparts.push(serialise_result(child));\n    }\n  }\n\n  childparts.sort((a, b) => fullsize(b) - fullsize(a));\n\n  let parts = [];\n\n  for (let i = 0; i < childparts.length; ++i) {\n    parts = parts.concat(childparts[i]);\n  }\n\n  const sliced = result.slice(2).map((l) => l[0]);\n  const thispart = [result[0], result[1]].concat(sliced);\n\n  return parts.concat([thispart]);\n}\n\nfunction stringify_result(serialised, target) {\n  let output = '';\n\n  serialised = serialised.slice(0);\n\n  for (let i = 0; i < serialised.length; ++i) {\n    const x = serialised[i];\n    const args = x.slice(2);\n\n    output += args.join(` ${x[1]} `) + ` = ${x[0]}, `;\n  }\n\n  output = output.substr(0, output.length - 2); // Strip final ', '\n\n  const result = serialised[serialised.length - 1][0];\n  if (result !== target) output += ` (off by ${Math.abs(result - target)})`;\n\n  return output;\n}\n\nexports.serialisedResult = (numbers, target, trickshot = false) => {\n  numbers.sort();\n  bestresult = [numbers[0], numbers[0]];\n\n  /* see if one of these numbers is the answer; with trickshot you'd rather\n   * have an interesting answer that's close than an exact answer\n   */\n  if (!trickshot) {\n    for (let i = 1; i < numbers.length; ++i) {\n      if (Math.abs(numbers[i] - target) < Math.abs(bestresult[0] - target)) {\n        bestresult = [numbers[i], numbers[i]];\n        bestvalsums = numbers[i];\n      }\n    }\n\n    if (bestresult[0] === target) return target + ' = ' + target;\n  }\n\n  return serialise_result(\n    tidyup_result(_solve_numbers(numbers, target, trickshot))\n  );\n};\n\nexports.solve_numbers = (numbers, target, trickshot = false) => {\n  return stringify_result(\n    exports.serialisedResult(numbers, target, trickshot),\n    target\n  );\n};\n","import React from 'react';\n\nconst Header = () => (\n  <header>\n    <div className=\"header-container\">\n      <a href=\"https://reallybigshoe.co.uk/index.html\">\n        <img src=\"images/favicon-32x32.png\" alt=\"Home\" />\n      </a>\n      <a href=\"https://reallybigshoe.co.uk/index.html\">Home</a>\n      <a\n        className=\"twitter\"\n        href=\"https://twitter.com/ReallyBigShoeUK\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Twitter\n      </a>\n      <a\n        className=\"github\"\n        href=\"https://github.com/JulianNicholls\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        GitHub\n      </a>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\n\nconst Tabs = ({ panel, setPanel }) => {\n  return (\n    <div className=\"container tab-holder\">\n      <div\n        className={'tab' + (panel === 'letters' ? ' active' : '')}\n        data-section=\"letters\"\n        onClick={() => setPanel('letters')}\n      >\n        Letters\n      </div>\n      <div\n        className={'tab' + (panel === 'numbers' ? ' active' : '')}\n        data-section=\"numbers\"\n        onClick={() => setPanel('numbers')}\n      >\n        Numbers\n      </div>\n    </div>\n  );\n};\n\nexport default Tabs;\n","// Class for storing words, both the text and the letters.\n// The word is stored in lower-case\n\nclass Word {\n  // Construct from a string\n  constructor(word) {\n    this.text = word.toLowerCase();\n\n    this._deconstruct();\n  }\n\n  // Takes either a String, Word, or Letter Map\n  canBeMadeFrom(other) {\n    if (other instanceof Word) {\n      other = other.letterMap;\n    } else if (!(other instanceof Map)) {\n      other = new Word(other).letterMap;\n    }\n\n    let ok = true;\n\n    this.letterMap.forEach((value, key) => {\n      ok = ok && other.has(key) && other.get(key) >= value;\n    });\n\n    return ok;\n  }\n\n  // Takes either a String, Word, or Letter Map\n  isAnagramOf(other) {\n    if (other instanceof Word) {\n      other = other.letterMap;\n    } else if (!(other instanceof Map)) {\n      other = new Word(other).letterMap;\n    }\n\n    if (this.letterMap.size !== other.size) return false;\n\n    this.letterMap.forEach((value, key) => {\n      const othervalue = other.get(key);\n\n      if (!othervalue || othervalue !== value) return false;\n    });\n\n    return true;\n  }\n\n  _deconstruct() {\n    this.letterMap = new Map();\n\n    this.text.split('').forEach((char) => {\n      const count = this.letterMap.get(char);\n\n      this.letterMap.set(char, count + 1 || 1);\n    });\n  }\n}\n\nexport default Word;\n","import Word from './Word';\n\n// A word list that stores words and gives candidate answers\n\nclass ClientWordList {\n  constructor() {\n    this._loadWords();\n  }\n\n  // Takes either a String, Word, or Letter Map\n  canBeMadeFrom(other) {\n    if (other instanceof Word) {\n      other = other.letterMap;\n    } else if (!(other instanceof Map)) {\n      other = new Word(other).letterMap;\n    }\n\n    return this.words\n      .filter((word) => word.canBeMadeFrom(other))\n      .map((word) => word.text)\n      .sort((a, b) => {\n        const lDiff = b.length - a.length;\n\n        if (lDiff !== 0) return lDiff;\n\n        return a < b ? -1 : 1;\n      });\n  }\n\n  async _loadWords() {\n    const response = await fetch('/data/countdown.words.json');\n    const words = await response.json();\n\n    this.words = words.map((line) => new Word(line));\n  }\n}\n\nexport default ClientWordList;\n","import React, { useState, useContext, useEffect } from 'react';\nimport { serialisedResult as solveNumbers } from './cd-numbers';\n\nimport ClientWordList from '../ClientWordList';\n\nconst WordContext = React.createContext();\n\nexport const WordsProvider = ({ children }) => {\n  const [words, setWords] = useState([]);\n  const [foundWords, setFoundWords] = useState([]);\n\n  const initialLoad = () => {\n    setWords(new ClientWordList());\n  };\n\n  useEffect(initialLoad, []);\n\n  const getWords = (letters) => {\n    setFoundWords(words.canBeMadeFrom(letters));\n  };\n\n  const state = {\n    foundWords,\n    getWords,\n    solveNumbers,\n  };\n\n  return <WordContext.Provider value={state}>{children}</WordContext.Provider>;\n};\n\nexport const useWords = () => {\n  const context = useContext(WordContext);\n\n  if (context === undefined)\n    throw new Error('useWords() must be used within a WordsProvider');\n\n  return context;\n};\n","import React, { useState } from 'react';\n\nimport { useWords } from '../context';\n\nconst LetterForm = () => {\n  const [letters, setLetters] = useState('');\n  const { getWords } = useWords();\n\n  const findWords = (event) => {\n    event.preventDefault();\n\n    getWords(letters);\n\n    return false;\n  };\n\n  const handleChange = (e) => {\n    const entry = e.target.value;\n\n    if (/^[A-Z]*$/i.test(entry)) {\n      setLetters(entry);\n\n      if (entry.length >= 7 && entry.length <= 15) getWords(entry);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <form id=\"letters-form\" onSubmit={findWords}>\n        <input\n          type=\"search\"\n          inputMode=\"search\"\n          id=\"letters\"\n          value={letters}\n          onChange={handleChange}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          autoFocus\n        />\n        <button type=\"submit\" className=\"big-button\" disabled={letters.length < 7}>\n          Countdown\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LetterForm;\n","import { useState } from 'react';\n\nimport { useWords } from '../context';\n\n// Result looks like:\n// [\n//   [50, '-', 75, 25],\n//   [ 1, '/', 50, 50 ],\n//   [ 99, '-', 100, 1 ],\n//   [ 10, '+', 7, 3 ],\n//   [ 990, '*', 99, 10 ]\n// ]\n\nconst NumbersResult = ({ result }) => {\n  if (result.length === 0) return null;\n\n  const lines = result.map((section) => {\n    const [total, op, ...values] = section;\n\n    return values.join(` ${op} `) + ` = ${total}\\n`;\n  });\n\n  return <pre>{lines}</pre>;\n};\n\nconst NumbersResultBox = ({ result }) => {\n  return (\n    <div className=\"result-box\">\n      <div className=\"header\">Method</div>\n      <div className=\"rb-main\">\n        <NumbersResult result={result} />\n      </div>\n    </div>\n  );\n};\n\nconst NumbersPanel = () => {\n  const [numbers, setNumbers] = useState('');\n  const [target, setTarget] = useState('');\n  const [result, setResult] = useState([]);\n\n  const { solveNumbers } = useWords(); // I'll change that name next\n\n  const handleChange = (e) => {\n    let entry = e.target.value;\n\n    entry = entry.trimStart();\n\n    if (/^(\\d{1,3}\\s*){0,6}$/.test(entry)) {\n      setNumbers(entry);\n    }\n  };\n\n  const handleTarget = (e) => {\n    let entry = e.target.value;\n\n    entry = entry.trim();\n\n    if (/^\\d{0,3}$/.test(entry)) setTarget(entry);\n  };\n\n  const enableSolve = () =>\n    /^(\\d{1,3}\\s+){5}\\d{1,3}$/.test(numbers.trim()) && /^\\d{3}$/.test(target);\n\n  const solve = (e) => {\n    e.preventDefault();\n\n    const numArray = numbers.split(/\\s+/).map((num) => parseInt(num, 10));\n    const targetNum = parseInt(target, 10);\n\n    setResult(solveNumbers(numArray, targetNum));\n  };\n\n  return (\n    <div className=\"container\">\n      <form id=\"numbers-form\">\n        <label htmlFor=\"numbers\">Numbers</label>\n        <input\n          type=\"search\"\n          inputMode=\"search\"\n          id=\"numbers\"\n          value={numbers}\n          onChange={handleChange}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          autoFocus\n          placeholder=\"e.g. 1 7 3 4 8 25\"\n        />\n\n        <label htmlFor=\"target\">Target</label>\n        <input\n          type=\"number\"\n          id=\"target\"\n          value={target}\n          onChange={handleTarget}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n        />\n\n        <button\n          type=\"submit\"\n          className=\"big-button\"\n          onClick={solve}\n          disabled={!enableSolve()}\n        >\n          Countdown\n        </button>\n      </form>\n\n      <NumbersResultBox result={result} />\n    </div>\n  );\n};\n\nexport default NumbersPanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst WIDE_CHANGEOVER = 21;\n\nconst WordBox = ({ words }) => {\n  const count = words.length;\n  const length = words[0].length;\n\n  return (\n    <div className={count < WIDE_CHANGEOVER ? 'word-box' : 'word-box wide'}>\n      <div className=\"header\" id={`header-${length}`}>\n        {length}-letter words <span>({count})</span>\n      </div>\n      <p>\n        {words.map((word, index) => (\n          <a\n            key={word}\n            href={`http://dictionary.reference.com/browse/${word}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {word.toUpperCase()}\n            {index !== count - 1 && ', '}\n          </a>\n        ))}\n      </p>\n    </div>\n  );\n};\n\nWordBox.propTypes = {\n  words: PropTypes.array.isRequired,\n};\n\nexport default WordBox;\n","import React from 'react';\n\nimport WordBox from './WordBox';\nimport { useWords } from '../context';\n\nconst WordView = () => {\n  const { foundWords } = useWords();\n\n  const boxes = words => {\n    let currentLength = 0;\n    let currentWords = [];\n    let boxes = [];\n\n    words.forEach(word => {\n      if (word.length !== currentLength) {\n        if (currentWords.length !== 0) {\n          boxes.push(<WordBox key={currentLength} words={currentWords} />);\n        }\n\n        currentWords = [];\n        currentLength = word.length;\n      }\n\n      currentWords.push(word);\n    });\n\n    return boxes.concat(<WordBox key={currentLength} words={currentWords} />);\n  };\n\n  if (foundWords.length === 0) return null;\n\n  return <div className=\"wordview\">{boxes(foundWords)}</div>;\n};\n\nexport default WordView;\n","import React, { useState } from 'react';\n\nimport Header from './components/Header';\nimport Tabs from './components/Tabs';\nimport LetterForm from './components/LetterForm';\nimport NumbersPanel from './components/NumbersPanel';\nimport WordView from './components/WordView';\n\nconst App = () => {\n  const [panel, setPanel] = useState('letters');\n\n  return (\n    <div>\n      <Header />\n      <Tabs panel={panel} setPanel={setPanel} />\n      {panel === 'letters' ? (\n        <>\n          <LetterForm />\n          <WordView />\n        </>\n      ) : (\n        <NumbersPanel />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { WordsProvider } from './context';\n\nimport 'normalize.css/normalize.css';\nimport './styles/styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WordsProvider>\n      <App />\n    </WordsProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}